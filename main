import sys
import random
from PySide2 import QtCore, QtWidgets, QtGui
import skimage

import numpy as np
import matplotlib.pyplot as plt
import math

from skimage.io import imread
from skimage import data_dir
from skimage.transform import radon, rescale, iradon

def sinogramWithSkimage(image,theta):
    return radon(image, theta=theta, circle=True)

def backProjectionWithSkimage(sinogram,theta):
    return iradon(sinogram, theta=theta, circle=True)

def diaplyAll(image,sinogram,reconstruction_fbp):
    fig, axes = plt.subplots(2, 2, figsize=(8, 8))
    imkwargs = dict(vmin=-0.2, vmax=0.2)
    axes[0, 0].set_title("Original")
    axes[0, 0].imshow(image, cmap=plt.cm.Greys_r)

    axes[0, 1].set_title("Radon transform\n(Sinogram)")
    axes[0, 1].set_xlabel("Projection angle (deg)")
    axes[0, 1].set_ylabel("Projection position (pixels)")
    axes[0, 1].imshow(sinogram, cmap=plt.cm.Greys_r,
                      extent=(0, 180, 0, sinogram.shape[0]), aspect='auto')

    axes[1, 0].set_title("Reconstruction\nFiltered back projection")
    axes[1, 0].imshow(reconstruction_fbp, cmap=plt.cm.Greys_r)
    axes[1, 1].set_title("Reconstruction error\nFiltered back projection")
    axes[1, 1].imshow(reconstruction_fbp - image, cmap=plt.cm.Greys_r, **imkwargs)
    fig.tight_layout()
    plt.show()

def emmiterPosition(alpha, r):
    x=r*math.cos(math.radians(alpha))
    y=r*math.sin(math.radians(alpha))
    return x,y

def sensorPosition(alpha, r, n,theta):
    result=[]
    for i in range(n):
        temp=[]
        x = r * math.cos(
            math.radians(alpha) + math.pi - (math.radians(theta) / 2) + i * (math.radians(theta) / (n-1)))
        y = r * math.sin(
            math.radians(alpha) + math.pi - (math.radians(theta) / 2) + i * (math.radians(theta) / (n-1)))
        temp.append(x)
        temp.append(y)
        result.append(temp)
    return result

def tomographing(image, alphaStep,n,theta):
    r = math.sqrt(image.shape[0]**2 + image.shape[1]**2)
    for i in range(0,360,alphaStep):
        emmiterPos = emmiterPosition(i, r)
        sensorPos = sensorPosition(i, r, n, theta)
        print(emmiterPos)
        print(sensorPos)

if __name__ == '__main__':
    image = imread(data_dir + "/phantom.png", as_gray=True)
    image = rescale(image, scale=0.4, mode='reflect', multichannel=False)
    tomographing(image,1,3,30)
    theta = np.linspace(0., 180., max(image.shape), endpoint=False)
    sinogram = sinogramWithSkimage(image,theta)
    reconstruction = backProjectionWithSkimage(sinogram,theta)
    diaplyAll(image,sinogram,reconstruction)